require('dotenv').config({ path: '.env.local' })
const { createClient } = require('@supabase/supabase-js')

// Initialize Supabase client
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY

if (!supabaseUrl || !supabaseKey) {
  console.error('Missing Supabase environment variables')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseKey)

async function analyzeAutoAdvanceTiming() {
  try {
    console.log('üîç Analyzing auto-advance timing and state management issues...\n')
    
    // Step 1: Analyze the current flow
    console.log('1Ô∏è‚É£ CURRENT AUTO-ADVANCE FLOW:')
    console.log('   Step 1: User clicks "Complete Lesson"')
    console.log('   Step 2: refreshUserProgress() - fetches latest progress from DB')
    console.log('   Step 3: 1000ms delay')
    console.log('   Step 4: canCompleteLesson() check')
    console.log('   Step 5: handleMarkLessonCompleted() - updates DB + local state')
    console.log('   Step 6: 1500ms delay')
    console.log('   Step 7: autoAdvanceToNextLesson() called')
    console.log('   Step 8: refreshUserProgress() again - fetches progress from DB')
    console.log('   Step 9: getNextUnlockedLesson() - finds next lesson')
    console.log('   Step 10: setSelectedLesson() + setCurrentLessonContent()')
    console.log('')
    
    // Step 2: Identify potential issues
    console.log('2Ô∏è‚É£ POTENTIAL TIMING ISSUES:')
    console.log('')
    
    console.log('‚ùå ISSUE 1: Double Progress Refresh')
    console.log('   ‚Ä¢ refreshUserProgress() called twice (steps 2 & 8)')
    console.log('   ‚Ä¢ Second refresh might overwrite local state updates')
    console.log('   ‚Ä¢ Race condition between DB update and local state')
    console.log('')
    
    console.log('‚ùå ISSUE 2: State Update Race Condition')
    console.log('   ‚Ä¢ handleMarkLessonCompleted() updates local state immediately')
    console.log('   ‚Ä¢ autoAdvanceToNextLesson() calls refreshUserProgress() again')
    console.log('   ‚Ä¢ This might overwrite the local state with stale DB data')
    console.log('')
    
    console.log('‚ùå ISSUE 3: Async State Updates')
    console.log('   ‚Ä¢ setUserProgress() is async and might not complete before getNextUnlockedLesson()')
    console.log('   ‚Ä¢ getNextUnlockedLesson() depends on userProgress state')
    console.log('   ‚Ä¢ If state is stale, it might find wrong next lesson')
    console.log('')
    
    console.log('‚ùå ISSUE 4: Multiple setTimeout Calls')
    console.log('   ‚Ä¢ 1000ms delay in completion handler')
    console.log('   ‚Ä¢ 1500ms delay before auto-advance')
    console.log('   ‚Ä¢ 300ms delay in auto-advance function')
    console.log('   ‚Ä¢ 500ms delay for transition end')
    console.log('   ‚Ä¢ Total: 3300ms of delays - too much complexity')
    console.log('')
    
    // Step 3: Check for duplicate completion handlers
    console.log('3Ô∏è‚É£ DUPLICATE COMPLETION HANDLERS:')
    console.log('   ‚Ä¢ Found TWO different completion button handlers in the code')
    console.log('   ‚Ä¢ Handler 1 (lines 700-750): Uses auto-advance with 1500ms delay')
    console.log('   ‚Ä¢ Handler 2 (lines 1020-1050): Uses window.location.reload() with 1000ms delay')
    console.log('   ‚Ä¢ This suggests inconsistent behavior across different UI states')
    console.log('')
    
    // Step 4: Analyze the getNextUnlockedLesson dependency
    console.log('4Ô∏è‚É£ getNextUnlockedLesson DEPENDENCY ISSUE:')
    console.log('   ‚Ä¢ getNextUnlockedLesson() depends on userProgress state')
    console.log('   ‚Ä¢ userProgress state is updated by setUserProgress()')
    console.log('   ‚Ä¢ setUserProgress() is called by refreshUserProgress()')
    console.log('   ‚Ä¢ refreshUserProgress() is async and might not complete before getNextUnlockedLesson()')
    console.log('   ‚Ä¢ This creates a race condition')
    console.log('')
    
    // Step 5: Check for state reset issues
    console.log('5Ô∏è‚É£ POTENTIAL STATE RESET ISSUES:')
    console.log('   ‚Ä¢ Course data might be reloading and resetting selectedLesson')
    console.log('   ‚Ä¢ useEffect hooks might be interfering with state updates')
    console.log('   ‚Ä¢ Multiple state updates happening simultaneously')
    console.log('')
    
    // Step 6: Proposed solutions
    console.log('6Ô∏è‚É£ PROPOSED SOLUTIONS:')
    console.log('')
    
    console.log('üîß SOLUTION 1: Fix Race Condition')
    console.log('   ‚Ä¢ Remove the second refreshUserProgress() call in autoAdvanceToNextLesson()')
    console.log('   ‚Ä¢ Use the local state that was already updated by handleMarkLessonCompleted()')
    console.log('   ‚Ä¢ This eliminates the race condition')
    console.log('')
    
    console.log('üîß SOLUTION 2: Simplify Timing')
    console.log('   ‚Ä¢ Remove unnecessary delays')
    console.log('   ‚Ä¢ Use a single, shorter delay for user feedback')
    console.log('   ‚Ä¢ Make the flow more predictable')
    console.log('')
    
    console.log('üîß SOLUTION 3: Fix getNextUnlockedLesson Logic')
    console.log('   ‚Ä¢ Pass the updated progress directly to getNextUnlockedLesson()')
    console.log('   ‚Ä¢ Don\'t rely on state that might be stale')
    console.log('   ‚Ä¢ Make the function more deterministic')
    console.log('')
    
    console.log('üîß SOLUTION 4: Consolidate Completion Handlers')
    console.log('   ‚Ä¢ Remove duplicate completion button handlers')
    console.log('   ‚Ä¢ Use consistent auto-advance behavior everywhere')
    console.log('   ‚Ä¢ Eliminate window.location.reload() calls')
    console.log('')
    
    // Step 7: Root cause summary
    console.log('7Ô∏è‚É£ ROOT CAUSE SUMMARY:')
    console.log('='.repeat(60))
    console.log('üéØ PRIMARY ISSUE: Race condition between local state and DB refresh')
    console.log('   ‚Ä¢ handleMarkLessonCompleted() updates local state')
    console.log('   ‚Ä¢ autoAdvanceToNextLesson() calls refreshUserProgress() again')
    console.log('   ‚Ä¢ This overwrites the local state with potentially stale DB data')
    console.log('   ‚Ä¢ getNextUnlockedLesson() then uses stale data to find next lesson')
    console.log('')
    console.log('üéØ SECONDARY ISSUES:')
    console.log('   ‚Ä¢ Too many delays and async operations')
    console.log('   ‚Ä¢ Duplicate completion handlers with different behavior')
    console.log('   ‚Ä¢ Complex state management with multiple async updates')
    console.log('')
    console.log('üí° RECOMMENDED FIX:')
    console.log('   1. Remove refreshUserProgress() call from autoAdvanceToNextLesson()')
    console.log('   2. Pass updated progress directly to getNextUnlockedLesson()')
    console.log('   3. Simplify timing and remove unnecessary delays')
    console.log('   4. Consolidate completion handlers')
    
  } catch (error) {
    console.error('‚ùå Unexpected error:', error)
  }
}

analyzeAutoAdvanceTiming()
